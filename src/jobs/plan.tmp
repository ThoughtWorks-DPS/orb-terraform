# /src/jobs/plan.yaml
# yamllint disable rule:line-length
---

description: >
  Terraform plan workflow.

  Includes the following optional customizations:

  - set desired terraform version. Default is the version installed on the executor.
  - reference your own docker image executor. Default is twdps/circleci-infra-aws
  - set an executor resource-class, default is medium
  - set the executor shell process launch configuration, default is '/bin/sh -eo pipefail'
  - set a desired version and provider for tflint, default is latest and aws
  - set whether to perform checkov scan of plan output file and optionally specify release version to use and additional flags
  - set whether to perform tfsec scan and optionally specify release version to use and additional flags
  - specify a working-directory, default is .
  - select a terraform workspace, default is none
  - turn off terraform fmt and validate checks

  Keep in mind that latest or executor default versions will change. Pin terraform and tflint versions
  to prevent if desired.

executor:
  name: circleci-infra-aws
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.resource-class >>
  username: << parameters.executor-registry-username >>
  password: << parameters.executor-registry-password >>

environment:
  TF_WORKSPACE: << parameters.workspace >>
shell: << parameters.shell >>

parameters:

  working-directory:
    description: specific folder in which to run the commands
    type: string
    default: '.'

  workspace:
    description: set terraform workspace infrastructure environment
    type: string
    default: ""

  executor-image:
    description: available override
    type: string
    default: docker.io/twdps/circleci-infra-aws:alpine-stable

  executor-registry-username:
    description: Environment variable to reference as username for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_LOGIN

  executor-registry-password:
    description: Environment variable to reference as password for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_PASSWORD

  resource-class:
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/sh -eo pipefail

  terraform-version:
    description: |
      If you specify a specific version, it will be installed and used by
      all orb terraform functions. Leave blank or specify version "installed"
      to use the version already installed on the executor.
    type: string
    default: ""

  terraform-init-additional-args:
    description: |
      Include any additional terraform init command arguments.
      Default is -backend=false.
    type: string
    default: -backend=false

  terraform-plan-additional-args:
    description:  |
      Include any additional terraform plan command arguments. Can be used in conjunction with
      terraform-var-file parameter or an override.
    type: string
    default: ""

  terraform-var-file:
    description: Include terraform -var-file parameter
    type: string
    default: ""

  terraform-plan-outfile:
    description: Filename for plan results
    type: string
    default: tfplan.json

  snyk-version:
    description: |
      Providing a tflint version results in a snyk scan of the repo using
      the desired version. Specify version "installed" to use the version
      already installed on the executor.
    type: string
    default: ""

  snyk-token:
    description: |
      Name of env var containing your Snyk API token. Default is SNYK_TOKEN.
    type: env_var_name
    default: SNYK_TOKEN

  snyk-organization:
    description: Snyk organization to reference.
    type: string
    default: ""

  snyk-additional-args:
    description: Optional additional flags to be passed to Snyk IaC.
    type: string
    default: ""

  checkov-version:
    description: |
      Providing a tflint version results in a checkov scan of the repo using
      the desired version. Specify version "installed" to use the version
      already installed on the executor.
    type: string
    default: ""

  checkov-additional-args:
    description: optional additional flags to be passed to checkov
    type: string
    default: ""

  trivy-version:
    description: |
      
    type: string
    default: ""

  tfc-workspace:
    description: Used for workspace 'creation' workflow
    type: string
    default: ""

  tfc-organization:
    description: name of terraform cloud organization
    type: string
    default: ""

  tfe-token:
    description: terraform team-api token. Uses $TFE_TOKEN by default
    type: string
    default: $TFE_TOKEN

  before-terraform:
    description: Optional steps to run before running terraform
    type: steps
    default: []

  after-terraform-init:
    description: Optional steps to run after terraform init but before running terraform plan
    type: steps
    default: []

  after-terraform:
    description: Optional steps to run after running terraform plan
    type: steps
    default: []


steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before-terraform lifecycle hook steps
      condition: << parameters.before-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.before-terraform >>
  - packages:
      terraform-version: << parameters.terraform-version >>
      checkov-version: << parameters.checkov-version >>
      snyk-version: << parameters.snyk-version >>
  - when:
      name: Confirm or Create tfcloud workspace in local-execute-mode
      condition: << parameters.tfc-workspace >>
      steps:
        - use-tfc-local-mode:
            tfc-workspace: << parameters.tfc-workspace >>
            tfc-organization: << parameters.tfc-organization >>
            tfe-token: << parameters.tfe-token >>
  - run:
      name: terraform init
      working_directory: << parameters.working-directory >>
      command: |
        terraform version
        terraform init << parameters.terraform-init-additional-args >>
  - when:
      name: Run after-terraform-init lifecycle hook steps
      condition: << parameters.after-terraform-init >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform-init >>

  - run:
      name: terraform plan
      working_directory: << parameters.working-directory >>
      command: |
        terraform plan \
          <<#parameters.terraform-var-file>> -var-file=<< parameters.terraform-var-file >> <</parameters.terraform-var-file>> \
          <<#parameters.terraform-plan-additional-args>> << parameters.terraform-plan-additional-args >> <</parameters.terraform-plan-additional-args>> \
          --out tfplan.binary
          terraform show -json tfplan.binary | jq '.' > << parameters.terraform-plan-outfile >>

  - when:
      name: run checkov scan of terraform source and plan outfile
      condition: << parameters.checkov-version >>
      steps:
        - checkov:
            working-directory: << parameters.working-directory >>
            terraform-plan-outfile: << parameters.terraform-plan-outfile >>
            checkov-additional-args: << parameters.checkov-additional-args >>
  - when:
      name: run Snyk IaC scan of terraform source and plan outfile
      condition: << parameters.snyk-version >>
      steps:
        - snyk:
            working-directory: << parameters.working-directory >>
            terraform-plan-outfile: << parameters.terraform-plan-outfile >>
            snyk-token: << parameters.snyk-token >>
            snyk-organization: << parameters.snyk-organization >>
            snyk-additional-args: << parameters.snyk-additional-args >>
  - when:
      name: run Trivy iaC scan of terraform plan outfile
      condition: << parameters.trivy-version >>
      working-directory: << parameters.working-directory >>
      steps:
        - run:
            name: run trivy scan of terraform plan outfile
            command: trivy config ./<< parameters.terraform-plan-outfile >>
  - when:
      name: Run after-terraform lifecycle hook steps
      condition: << parameters.after-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform >>
