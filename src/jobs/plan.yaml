# /src/jobs/plan.yaml
# yamllint disable rule:line-length
---

description: >
  Terraform plan workflow.

  Includes the following optional customizations:

  - set desired terraform version. Default is the version installed on the executor.
  - reference your own docker image executor. Default is twdps/circleci-infra-aws
  - set an executor resource-class, default is medium
  - set the executor shell process launch configuration, default is '/bin/sh -eo pipefail'
  - set a desired version and provider for tflint, default is latest and aws
  - set whether to perform checkov scan of plan output file and optionally specify release version to use and additional flags
  - set whether to perform tfsec scan and optionally specify release version to use and additional flags
  - specify a working-directory, default is .
  - select a terraform workspace, default is none
  - turn off terraform fmt and validate checks

  Keep in mind that latest or executor default versions will change. Pin terraform and tflint versions
  to prevent if desired.

executor:
  name: circleci-infra-aws
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.resource-class >>
  username: << parameters.executor-registry-username >>
  password: << parameters.executor-registry-password >>

environment:
  TF_WORKSPACE: << parameters.workspace >>
shell: << parameters.shell >>

parameters:

  working-directory:
    description: specific folder in which to run the commands
    type: string
    default: '.'

  workspace:
    description: set terraform workspace infrastructure environment
    type: string
    default: ""

  executor-image:
    description: available override
    type: string
    default: docker.io/twdps/circleci-infra-aws:alpine-stable

  executor-registry-username:
    description: Environment variable to reference as username for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_LOGIN

  executor-registry-password:
    description: Environment variable to reference as password for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_PASSWORD

  resource-class:
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/sh -eo pipefail

  terraform-version:
    description: must provide the release version of terraform
    type: string
    default: ""

  tflint-version:
    description: optional override to a specific release version of tflint
    type: string
    default: 'latest'

  tflint-provider:
    description: provider for tflint plugin
    type: enum
    enum: ["aws", "azurerm", "google"]
    default: aws

  lint-terraform:
    description: |
      perform tflint of terraform files. Both this parameter and `static-analysis` must be set to `true` for linting to occur
    type: boolean
    default: true

  checkov-version:
    description: optional override to a specific release version of checkov
    type: string
    default: ""

  checkov-scan:
    description: |
      perform checkov scan of terraform plan. Both this parameter and `static-analysis` must be set to `true` for checkov to run
    type: boolean
    default: true

  checkov-additional-args:
    description: optional additional flags to be passed to checkov
    type: string
    default: ""

  snyk-version:
    description: optional override to a specific release version of snyk
    type: string
    default: ""

  snyk-scan:
    description: perform Snyk scan of source code
    type: boolean
    default: false

  snyk-organization:
    description: the Snyk organization to reference
    type: string
    default: ""

  tfsec-scan:
    description: |
      perform tfsec scan of terraform files. Both this parameter and `static-analysis` must be set to `true` for tfscan to occur
    type: boolean
    default: true

  tfsec-additional-args:
    description: optional override of default tfsec parameters
    type: string
    default: ""

  tfsec-version:
    description: optional override to a specific release version of tfsec
    type: string
    default: ""

  validate-terraform-fmt:
    description: |
      perform terraform fmt and validate. Both this parameter and `static-analysis` must be set to `true` for validation to occur
    type: boolean
    default: true

  var-file:
    description: terraform variable file to include in plan
    type: string
    default: ""

  extra-terraform-args:
    description: additional command line arguements for terraform plan
    type: string
    default: ""

  backend-conf:
    description: additional terraform init parameters to configure backend.conf if necessary
    type: string
    default: ""

  tfc-local-execution-mode:
    description: Confirm or Create the associated tfc-workspace-name in local-execution-mode for tfc-organization.
    type: boolean
    default: false

  tfc-organization:
    description: name of terraform cloud organization
    type: string
    default: ""

  tfc-workspace-name:
    description: Used for workspace 'creation' workflow
    type: string
    default: ""

  tfe-token:
    description: terraform team-api token. Uses $TFE_TOKEN by default
    type: string
    default: $TFE_TOKEN

  before-terraform:
    description: Optional steps to run before running terraform
    type: steps
    default: []

  after-terraform-init:
    description: Optional steps to run after terraform init but before running terraform plan
    type: steps
    default: []

  after-terraform:
    description: Optional steps to run after running terraform plan
    type: steps
    default: []

  static-analysis:
    description: |
      Run all static steps. When set to false, prevents all static analysis tasks from running (tflint, checkov, tfsec, tf fmt, tf validate).
      You may be interested in the separate `static-analysis` job for performing these tasks.
    type: boolean
    default: true

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before-terraform lifecycle hook steps
      condition: << parameters.before-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.before-terraform >>
  - setup-packages:
      snyk-version: << parameters.snyk-version >>
      terraform-version: << parameters.terraform-version >>
      checkov-version: << parameters.checkov-version >>
      tfsec-version: << parameters.tfsec-version >>
  - when:
      name: run tflint
      condition:
        and:
          - << parameters.static-analysis >>
          - << parameters.lint-terraform >>
      steps:
        - tflint:
            working-directory: << parameters.working-directory >>
            tflint-version: << parameters.tflint-version >>
            tflint-provider: << parameters.tflint-provider >>
  - when:
      name: Confirm or Create tfcloud workspace in local-execute-mode
      condition: << parameters.tfc-local-execution-mode >>
      steps:
        - create-tfc-workspace:
            tfc-organization: << parameters.tfc-organization >>
            tfc-workspace-name: << parameters.tfc-workspace-name >>
            tfe-token: << parameters.tfe-token >>
  - run:
      name: terraform init
      working_directory: << parameters.working-directory >>
      command: |
        terraform version
        terraform init <<#parameters.backend-conf>> << parameters.backend-conf >> <</parameters.backend-conf>>
  - when:
      name: perform tfsec scan of terraform files
      condition:
        and:
          - << parameters.static-analysis >>
          - << parameters.tfsec-scan >>
      steps:
        - tfsec:
            working-directory: << parameters.working-directory >>
            tfsec-additional-args: << parameters.tfsec-additional-args >>
  - when:
      name: run terraform validate
      condition:
        and:
          - << parameters.static-analysis >>
          - << parameters.validate-terraform-fmt >>
      steps:
        - validate:
            working-directory: << parameters.working-directory >>
  - when:
      name: Run after-terraform-init lifecycle hook steps
      condition: << parameters.after-terraform-init >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform-init >>
  - run:
      name: terraform plan
      working_directory: << parameters.working-directory >>
      command: terraform plan <<#parameters.var-file>> -var-file=<< parameters.var-file >> <</parameters.var-file>> <<#parameters.extra-terraform-args>> << parameters.extra-terraform-args >> <</parameters.extra-terraform-args>> --out tfplan.binary
  - when:
      name: generate terraform plan as json for security tools
      condition:
        or:
          - and:
              - << parameters.static-analysis >>
              - << parameters.checkov-scan >>
          - and:
              - << parameters.static-analysis >>
              - << parameters.snyk-scan >>
      steps:
        - generate-terraform-json:
            working-directory: << parameters.working-directory >>
  - when:
      name: run checkov inspection of terraform plan output
      condition:
        and:
          - << parameters.static-analysis >>
          - << parameters.checkov-scan >>
      steps:
        - checkov:
            working-directory: << parameters.working-directory >>
            checkov-additional-args: << parameters.checkov-additional-args >>
  - when:
      name: run snyk inspection of terraform plan output
      condition:
        and:
          - << parameters.static-analysis >>
          - << parameters.snyk-scan >>
      steps:
        - snyk:
            working-directory: << parameters.working-directory >>
            organization: << parameters.snyk-organization >>
  - when:
      name: Run after-terraform lifecycle hook steps
      condition: << parameters.after-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform >>
