# /src/jobs/destroy.yml
# yamllint disable rule:line-length
---
description: >
  Terraform destroy workflow.

  Includes the following optional customizations:

  - Set desired terraform version. Default is the version installed on the executor.
  - Use your own docker image executor. Default is twdps/circleci-infra-aws:alpine-stable.
  - Set an executor resource-class, default is medium.
  - Set the executor shell process launch configuration, default is '/bin/bash -eo pipefail'
  - Specify a working-directory, default is .
  - Select a terraform workspace, default is none.

  Note: Does not include full static code analysis hooks or terrafrom plan. Use the included
  static-analysis and plan jobs.

  Note: The default executor image in this job is effectively set to Latest.
  While this is efficient for orb development purposes, it is recommended
  to always pin the executor version when using orbs in actual infrastructure
  pipelines.

  Note: Executor resources sizes 2xlarge and 2xlarge+ require review by
  circleci support. Open a support ticket to request access.

executor:
  name: circleci-infra-aws
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.resource-class >>
  username: << parameters.executor-registry-username >>
  password: << parameters.executor-registry-password >>

environment:
  TF_WORKSPACE: << parameters.workspace >>
shell: << parameters.shell >>

parameters:

  working-directory:
    description: Specific folder in which to run the commands.
    type: string
    default: '.'

  workspace:
    description: Terraform workspace infrastructure environment.
    type: string
    default: ""

  executor-image:
    description: |
      Available override. Default is docker.io/twdps/circleci-infra-aws:alpine-stable.
    type: string
    default: docker.io/twdps/circleci-infra-aws:alpine-stable

  executor-registry-username:
    description: |
      Environment variable to reference as username for the registry
      specified by executor-image parameter.
    type: env_var_name
    default: DOCKER_LOGIN

  executor-registry-password:
    description: |
      Environment variable to reference as password for the registry
      specified by executor-image parameter.
    type: env_var_name
    default: DOCKER_PASSWORD

  resource-class:
    description: Executor resource size. Default is medium.
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  shell:
    description: |
      default shell invocation. Override to support different shells or
      tools like 1password.
    type: string
    default: /bin/bash -eo pipefail

  terraform-version:
    description: |
      If you specify a terraform version, it will be installed and used by
      all orb terraform functions. Leave blank or specify version "installed"
      to use the version already installed on the executor.
    type: string
    default: ""

  terraform-init-additional-args:
    description: |
      Include any additional terraform init command arguments.
      Default is -backend=false.
    type: string
    default: ""

  terraform-destroy-additional-args:
    description: |
      Include any additional terraform destroy command arguments. Can be used in conjunction with
      terraform-var-file parameter or an override.
    type: string
    default: ""

  terraform-var-file:
    description: Include terraform -var-file parameter.
    type: string
    default: ""

  after-terraform-init:
    description: |
      Optional steps to run after terraform init but before running terraform plan.
    type: steps
    default: []

  before-destroy:
    description: Optional steps to run before terraform destroy.
    type: steps
    default: []

  after-destroy:
    description: Optional steps to run after terraform destroy.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before-destroy lifecycle hook steps
      condition: << parameters.before-destroy >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.before-destroy >>
  - install:
      terraform-version: << parameters.terraform-version >>
  - run:
      name: terraform init
      working_directory: << parameters.working-directory >>
      command: |
        terraform version
        terraform init << parameters.terraform-init-additional-args >>
  - when:
      name: Run after-terraform-init lifecycle hook steps
      condition: << parameters.after-terraform-init >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform-init >>
  - run:
      name: terraform destroy
      working_directory: << parameters.working-directory >>
      command: |
        terraform destroy \
          <<#parameters.terraform-var-file>> -var-file=<< parameters.terraform-var-file >> <</parameters.terraform-var-file>> \
          <<#parameters.terraform-destroy-additional-args>> << parameters.terraform-destroy-additional-args >> <</parameters.terraform-destroy-additional-args>> \
          --auto-approve
  - when:
      name: Run after-destroy lifecycle hook steps
      condition: << parameters.after-destroy >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-destroy >>
