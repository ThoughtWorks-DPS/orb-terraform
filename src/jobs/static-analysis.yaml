# /src/jobs/static-analysis.yaml

description: >
  Standalone job that can perform a selectable set of terraform code static
  analysis and linting tasks.

  Supported tools:
  - terraform validate (default)
  - tflint
  - tfsec
  - checkov
  - snyk
  - terrascan
  - driftctl
  - infracost

  
  Note: The default executor image in this job is effectively set to Latest. While
  this is efficient for orb development purposes, it is recommended to always pin
  the executor version when using orbs in actual infrastructure pipelines.

  Note: Executor resources sizes 2xlarge and 2xlarge+ require review by circleci
  support. Open a support ticket to request access.

executor:
  name: circleci-infra-aws
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.resource-class >>
  username: << parameters.executor-registry-username >>
  password: << parameters.executor-registry-password >>

shell: << parameters.shell >>

parameters:

  working-directory:
    description: specific folder in which to run the commands
    type: string
    default: '.'

  executor-image:
    description: available override
    type: string
    default: docker.io/twdps/circleci-infra-aws:alpine-stable

  executor-registry-username:
    description: Environment variable to reference as username for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_LOGIN

  executor-registry-password:
    description: Environment variable to reference as password for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_PASSWORD

  resource-class:
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/bash -eo pipefail


  terraform-validate:
    description: |
      Validate runs checks that verify whether a configuration is syntactically
      valid and internally consistent, regardless of any provided variables or
      existing state. It is thus primarily useful for general verification of
      reusable modules, including correctness of attribute names and value types.
    type: boolean
    default: true

  tflint:
    description: |
      perform tflint of terraform files.
    type: boolean
    default: true

  tflint-version:
    description: optional override to a specific release version of tflint
    type: string
    default: 'latest'

  tflint-provider:
    description: provider for tflint plugin
    type: enum
    enum: ["aws", "azurerm", "google"]
    default: aws

  #checkov:
  checkov-version:
    description: optional override to a specific release version of checkov
    type: string
    default: ""

  checkov-scan:
    description: perform checkov scan of source code
    type: boolean
    default: true

  checkov-additional-args:
    description: optional additional flags to be passed to checkov
    type: string
    default: ""

  snyk-version:
    description: optional override to a specific release version of snyk
    type: string
    default: ""

  snyk-scan:
    description: perform Snyk scan of source code
    type: boolean
    default: true

  tfsec-scan:
    description: perform tfsec scan of terraform source files
    type: boolean
    default: true

  tfsec-additional-args:
    description: optional override of default tfsec parameters
    type: string
    default: ""

  tfsec-version:
    description: optional override to a specific release version of tfsec
    type: string
    default: ""

  snyk-organization:
    description: the Snyk organization to reference
    type: string
    default: ""

  snyk-additional-args:
    description: optional additional flags to be passed to Snyk IaC
    type: string
    default: ""

  backend-conf:
    description: additional terraform init parameters to configure backend.conf if necessary
    type: string
    default: ""

  before-static-analysis:
    description: Optional steps to run before running static analysis
    type: steps
    default: []

  after-static-analysis:
    description: Optional steps to run after running static analysis
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before-static-analysis lifecycle hook steps
      condition: << parameters.before-static-analysis >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.before-static-analysis >>
  # - setup-packages:
  #     snyk-version: << parameters.snyk-version >>
  #     checkov-version: << parameters.checkov-version >>
  #     tfsec-version: << parameters.tfsec-version >>
  # - when:
  #     name: run tflint
  #     condition: << parameters.lint-terraform >>
  #     steps:
  #       - tflint:
  #           working-directory: << parameters.working-directory >>
  #           tflint-version: << parameters.tflint-version >>
  #           tflint-provider: << parameters.tflint-provider >>
  # - run:
  #     name: terraform init
  #     working_directory: << parameters.working-directory >>
  #     command: |
  #       terraform version
  #       terraform init -backend=false <<#parameters.backend-conf>> << parameters.backend-conf >> <</parameters.backend-conf>>
  # - when:
  #     name: perform tfsec scan of terraform source files
  #     condition: << parameters.tfsec-scan >>
  #     steps:
  #       - tfsec:
  #           working-directory: << parameters.working-directory >>
  #           tfsec-additional-args: << parameters.tfsec-additional-args >>
  # - when:
  #     name: run Snyk IaC inspection of TF source files
  #     condition: << parameters.snyk-scan >>
  #     steps:
  #       - snyk-static:
  #           working-directory: << parameters.working-directory >>
  #           organization: << parameters.snyk-organization >>
  #           snyk-additional-args: << parameters.snyk-additional-args >>
  # - when:
  #     name: run checkov inspection of terraform source files
  #     condition: << parameters.checkov-scan >>
  #     steps:
  #       - checkov-static:
  #           working-directory: << parameters.working-directory >>
  #           checkov-additional-args: << parameters.checkov-additional-args >>
  - when:
      name: perform terraform validate
      condition: << parameters.terraform-validate >>
      steps:
        - validate:
            working-directory: << parameters.working-directory >>
  - when:
      name: Run after-static-analysis lifecycle hook steps
      condition: << parameters.after-static-analysis >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-static-analysis >>
